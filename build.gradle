buildscript{ 
	repositories {
		mavenCentral()
		maven {
			url "https://repo.comm-unity.at/nexus/content/groups/public"
			content { includeGroupByRegex "at\\.comm_unity.*" }
		}
	}
	dependencies {
		classpath 'at.comm_unity.gradle:publishing-plugin:1.1.0'
	}
}

plugins {
	id 'eclipse'
	id 'groovy'
	id 'groovy-gradle-plugin'
}
apply plugin: 'at.comm_unity.maven-publish-conventions'

println "Running Gradle ${gradle.gradleVersion} for ${project.name} with Java " + System.getProperty("java.version") + " (" + System.getProperty("java.home") + ")" 

group = 'at.comm_unity.com.github.jacobono'

java {
    toolchain {
		languageVersion = JavaLanguageVersion.of(8)
    }
	withSourcesJar()
}

repositories {
	mavenCentral()
	maven {
		url "https://repo.comm-unity.at/nexus/content/groups/public"
		content { includeGroupByRegex "at\\.comm_unity.*" }
	}
}

gradlePlugin {
	plugins {
		wsdlPlugin {
			id = "at.comm_unity.com.github.jacobono.wsdl"
			implementationClass = "org.gradle.jacobo.plugins.WsdlPlugin"
		}
	}
}

sourceSets {
  integTest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

configurations {
	integTestImplementation.extendsFrom testImplementation
	integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
	//https://github.com/croz-ltd/klokwrk-project/blob/master/support/documentation/article/debugging-gradle-from-idea/debugging-gradle-from-idea.md
	runtimeOnly(gradleApi())

//  implementation gradleApi()
  implementation localGroovy()
  implementation 'at.comm_unity.com.github.jacobono:gradle-xsd-wsdl-slurping:1.1.2.1'
  implementation 'com.google.inject:guice:3.0'
  
	testImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
	testImplementation ("org.spockframework:spock-core") {
		exclude group: "org.codehaus.groovy", module: "groovy"
	}
/*	testImplementation ("org.spockframework:spock-junit4") {
		exclude group: "org.codehaus.groovy", module: "groovy"
	}
	testImplementation "junit:junit:4.13.1"*/
	testImplementation ("org.spockframework:spock-guice") {
		exclude group: "org.codehaus.groovy", module: "groovy"
	}
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testImplementation 'cglib:cglib-nodep:2.2'
  testImplementation 'org.objenesis:objenesis:1.2'
}

groovydoc {
  docTitle = "Gradle WSDL Plugin"
  link("http://groovy.codehaus.org/gapi/", "groovy.", "org.codehaus.groovy.")
  link("https://docs.oracle.com/javase/8/docs/api/", "java.")
  link("http://google-guice.googlecode.com/svn/trunk/javadoc/", "com.google.")
  link("https://docs.gradle.org/current/javadoc/", "org.gradle.", "org.gradle.api")
}

task groovyDocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier = 'groovydoc'
  from groovydoc.destinationDir
}

artifacts {
	// to also generate the groovyDocJar at assemble
	archives jar, groovyDocJar
}

publishing {
	publications {
		pluginMaven(MavenPublication) {
			artifact groovyDocJar
		}
	}
}

task integTest(type: Test, dependsOn: 'test') {
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath
  reports.html.outputLocation = java.testReportDir.dir("integTests")
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named('check') {
	dependsOn(integTest)
}

wrapper {
    gradleVersion = '8.9'
}
