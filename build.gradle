buildscript{ 
  repositories {
    mavenCentral()
  }
  dependencies {
//    classpath "net.saliman:gradle-cobertura-plugin:1.1.2"
//    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
  }
}

plugins {
	id 'eclipse'
	id 'groovy'
	id 'java-gradle-plugin'
	id 'maven-publish'
}
//apply plugin: 'at.comm_unity.maven-publish-conventions'

println "Running Gradle ${gradle.gradleVersion} for ${project.name} with Java " + System.getProperty("java.version") + " (" + System.getProperty("java.home") + ")" 

group = 'at.comm_unity.com.github.jacobono'

java {
    toolchain {
		languageVersion = JavaLanguageVersion.of(8)
    }
	withSourcesJar()
}	

repositories {
	mavenCentral()
	maven {
		url "https://repo.comm-unity.at/nexus/content/groups/public"
		content { includeGroupByRegex "at\\.comm_unity.*" }
	}
}

sourceSets {
  integTest {
     compileClasspath += main.output + test.output
     runtimeClasspath += main.output + test.output
    groovy {
      srcDir 'src/integTest/groovy'
    }
  }
}

configurations { 
  integTestCompile.extendsFrom testCompile
  integTestRuntime.extendsFrom testRuntime
}

dependencies {
  implementation gradleApi()
  implementation localGroovy()
  implementation 'at.comm_unity.com.github.jacobono:gradle-xsd-wsdl-slurping:1.1.2'
  implementation 'com.google.inject:guice:3.0'
  
  testImplementation "org.spockframework:spock-core:0.7-groovy-1.8"
  testImplementation 'cglib:cglib-nodep:2.2'
  testImplementation 'org.objenesis:objenesis:1.2'
}

groovydoc {
  docTitle = "Gradle WSDL Plugin"
  link("http://groovy.codehaus.org/gapi/", "groovy.", "org.codehaus.groovy.")
  link("http://docs.oracle.com/javase/7/docs/api/", "java.")
  link("http://google-guice.googlecode.com/svn/trunk/javadoc/", "com.google.")
  link("http://www.gradle.org/docs/current/javadoc/", "org.gradle.", "org.gradle.api")
}

task groovyDocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier = 'groovydoc'
  from groovydoc.destinationDir
}

/*task('unversionedJar', type: Jar, dependsOn: 'jar') {
  version = null
  from sourceSets.main.output
}

task('installPlugin', type: Copy, dependsOn: 'unversionedJar') {
  def gradleInstallDir = gradle.gradleHomeDir
  group = 'installation'
  description = 'Installs the plugin jar in your gradle distribution.'
  from "${buildDir}/libs/${unversionedJar.archiveName}"
  into "/${gradleInstallDir}/lib/plugins"
}

installPlugin.doLast {
  def gradleInstallDir = gradle.gradleHomeDir
  println "Installed in: ${gradleInstallDir}/lib/plugins as: ${unversionedJar.archiveName}"
}

task('uninstallPlugin', type: Delete) {
  def gradleInstallDir = gradle.gradleHomeDir
  group = 'installation'
  description = 'Removes the plugin from your gradle distribution.'
  delete("/${gradleInstallDir}/lib/plugins/${unversionedJar.archiveName}")
}*/

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

artifacts {
  archives jar, groovyDocJar
}

// cuRepository* definiert in $HOME/.gradle/gradle.properties
def repositoryUsernamePropName = 'cuRepositoryUser'
def repositoryPasswordPropName = 'cuRepositoryPassword'

publishing {
	repositories {
		maven {
			url "https://repo.comm-unity.at/nexus/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"

			credentials {
				username project.hasProperty(repositoryUsernamePropName) ? project.getProperty(repositoryUsernamePropName) : ''
				password project.hasProperty(repositoryPasswordPropName) ? project.getProperty(repositoryPasswordPropName) : ''
			}
		}
	}

  publications {
    plugin(MavenPublication) {
      from components.java
      
      artifact groovyDocJar
    }
  }
}

task integTest(type: Test, dependsOn: 'test') {
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath
  testLogging {
    events "passed", "skipped", "failed"
  }
}

check.dependsOn(integTest)

wrapper {
    gradleVersion = '8.6'
}
